class DisjointSet {
    
public: 
   vector<int> rank,parent, size;
    DisjointSet(int n) {
        rank.resize(n+1, 0); 
        parent.resize(n+1);
        size.resize(n+1); 
        for(int i = 0;i<=n;i++) {
            parent[i] = i; 
            size[i] = 1; 
        }
    }

    int findUPar(int node) {
        if(node == parent[node])
            return node; 
        return parent[node] = findUPar(parent[node]); 
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u); 
        int ulp_v = findUPar(v); 
        if(ulp_u == ulp_v) return; 
        if(rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v; 
        }
        else if(rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u; 
        }
        else {
            parent[ulp_v] = ulp_u; 
            rank[ulp_u]++; 
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u); 
        int ulp_v = findUPar(v); 
        if(ulp_u == ulp_v) return; 
        if(size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v; 
            size[ulp_v] += size[ulp_u]; 
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v]; 
        }
    }
};

class Solution

{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // vector<int> vis(V+1,0);
        
        // priority_queue<pair<int,int>,vector<pair<int,int>>, 
        // greater<pair<int,int>>> pq;
        
        // pq.push({0,0});
        // int sum = 0;
        
        // while(!pq.empty()){
        //     int node = pq.top().second;
        //     int wt = pq.top().first;
        //     pq.pop();
        //     if(vis[node]==1)continue;
        //     sum+=wt;
        //     vis[node] = 1;
            
        //     for(auto it: adj[node]){
        //         if(!vis[it[0]]){
        //             pq.push({it[1],it[0]});
        //         }
        //     }
        // }
        // return sum;
        
        
        vector<pair<int,pair<int,int>>> edges;
        
        for(int i=0;i<V;i++){
            for(auto it: adj[i]){
                edges.push_back({it[1],{i,it[0]}});
            }
        }
        
        sort(edges.begin(),edges.end());
        
        DisjointSet Ds(V+1);
        int sum = 0;
        
        for(auto it: edges){
            if(Ds.findUPar(it.second.first)!=Ds.findUPar(it.second.second)){
                sum+=it.first;
                Ds.unionBySize(it.second.first,it.second.second);
            }
        }
        return sum;
        
    }
};